<?php
$config = Mage::helper('algoliasearch/config');
$catalogSearchHelper = $this->helper('catalogsearch'); /** @var $catalogSearchHelper Mage_CatalogSearch_Helper_Data */
$algoliaSearchHelper = $this->helper('algoliasearch'); /** @var $algoliaSearchHelper Algolia_Algoliasearch_Helper_Data */
$product_helper = Mage::helper('algoliasearch/entity_producthelper');
$formKey = Mage::getSingleton('core/session')->getFormKey();

$base_url = Mage::getBaseUrl();

$isSearchPage = false;;
$hash_path = null;

$group_id = Mage::getSingleton('customer/session')->getCustomerGroupId();
$price_key = '.default';

if ($config->isCustomerGroupsEnabled(Mage::app()->getStore()->getStoreId()))
{
    $price_key = '.group_'.$group_id;
}

$title = '';
$content = '';

/**
 * Handle category replacement
 */
if($config->isInstantEnabled() && $config->replaceCategories() && Mage::app()->getRequest()->getControllerName() == 'category')
{
    $category = Mage::registry('current_category');

    if ($category && $category->getDisplayMode() !== 'PAGE')
    {
        $category->getUrlInstance()->setStore(Mage::app()->getStore()->getStoreId());

        if ($category->getDisplayMode() == 'PRODUCTS_AND_PAGE')
        {
            $page       = $category->getLandingPage();
            $cms_block  = Mage::getModel('cms/block')->load($page);
            $title      = $cms_block->getTitle();
            $content    = $cms_block->getContent();
        }

        $path = '';

        foreach ($category->getPathIds() as $treeCategoryId) {
            if ($path != '') {
                $path .= ' /// ';
            }

            $path .= $product_helper->getCategoryName($treeCategoryId, Mage::app()->getStore()->getStoreId());
        }

        $indexName = $product_helper->getIndexName(Mage::app()->getStore()->getStoreId());
        $category_url = $category->getUrl($category);
        $hash_path = '#q';//=&page=0&refinements=%5B%7B%22categories%22%3A%5B%22'.$path.'%22%5D%7D%5D&numerics_refinements=%7B%7D&index_name=%22'.$indexName.'%22';

        $isSearchPage = true;
    }
}

/**
 * Handle search
 */
if ($config->isInstantEnabled())
{
    $pageIdentifier = Mage::app()->getFrontController()->getAction()->getFullActionName();

    if ($pageIdentifier === 'catalogsearch_result_index')
    {
        $query = $catalogSearchHelper->getEscapedQueryText();

        if ($query == '__empty__')
            $query = '';

        $product_helper = Mage::helper('algoliasearch/entity_producthelper');

        $hash_path = '#q='.htmlentities($query, ENT_COMPAT, "UTF-8");//.'&page=0&refinements=%5B%5D&numerics_refinements=%7B%7D&index_name=%22'.$product_helper->getIndexName().'%22';

        $refinement_key = Mage::app()->getRequest()->getParam('refinement_key');
        $refinement_value = Mage::app()->getRequest()->getParam('refinement_value');

        if ($refinement_key !== null)
        {
            $hash_path = '#q=';//&page=0&refinements=%5B%7B%22' . $refinement_key . '%22%3A%5B%22' . $refinement_value . '%22%5D%7D%5D&numerics_refinements=%7B%7D&index_name=%22' . $product_helper->getBaseIndexName() . '_products%22';
        }

        $isSearchPage = true;
    }
}


if ($hash_path !== null)
{
    echo '<script>if (window.location.hash.length <= 1) { window.location.hash = "'.$hash_path.'"; }</script>';
}



if ($base_url[strlen($base_url) - 1] == '/')
    $base_url = substr($base_url, 0, strlen($base_url) - 1);

if ($config->isInstantEnabled() && $isSearchPage) {
    // hide the instant-search selector ASAP to remove flickering. Will be re-displayed later with JS
    echo '<style>' . $config->getInstantSelector() . '{ display: none; }</style>';


}
?>

<!--
//================================
//
// Search box
//
//================================
-->

<?php

$types = array();

if ($config->getNumberOfProductSuggestions() > 0)
    $types[] = $this->__('products');

if ($config->getNumberOfCategorySuggestions() > 0)
    $types[] = $this->__('categories');

if ($config->getNumberOfPageSuggestions() > 0)
    $types[] = $this->__('pages');

$or = count($types) > 1 ? ' '.$this->__('or').' ' : '';

$placeholder = $this->__('Search');

if (count($types) > 0)
{
    $placeholder = $this->__('Search for'). ' ' . implode(', ', array_slice($types, 0, count($types) - 1)) . $or . $types[count($types) - 1];
}

$class = $isSearchPage ? 'search-page' : '';

?>

<form id="search_mini_form" action="<?php echo $catalogSearchHelper->getResultUrl() ?>" method="get">
    <div id="algolia-searchbox" class="<?php echo $class; ?>">
        <label for="search"><?php echo $this->__('Search:') ?></label>
        <input id="search" type="text" name="<?php echo $catalogSearchHelper->getQueryParamName() ?>" class="input-text" autocomplete="off" spellcheck="false" autocorrect="off" autocapitalize="off" placeholder="<?php echo $placeholder; ?>" />
        <svg id="algolia-glass" xmlns="http://www.w3.org/2000/svg" class="magnifying-glass" width="24" height="24" viewBox="0 0 128 128" >
          <g transform="scale(4)">
            <path stroke-width="3" d="M19.5 19.582l9.438 9.438"></path>
            <circle stroke-width="3" cx="12" cy="12" r="10.5" fill="none"></circle>
            <path d="M23.646 20.354l-3.293 3.293c-.195.195-.195.512 0 .707l7.293 7.293c.195.195.512.195.707 0l3.293-3.293c.195-.195.195-.512 0-.707l-7.293-7.293c-.195-.195-.512-.195-.707 0z" ></path>
          </g>
        </svg>
    </div>
</form>

<!--
//================================
//
// Multi-category Autocomplete
//
//================================
-->

<!-- Product hit template -->
<script type="text/template" id="autocomplete_products_template">
    <a class="algoliasearch-autocomplete-hit" href="{{url}}">
        {{#thumbnail_url}}
        <div class="thumb"><img src="{{thumbnail_url}}" /></div>
        {{/thumbnail_url}}

        <div class="algoliasearch-autocomplete-price">
            <span class="after_special">
                {{price<?php echo $price_key; ?>_formated}}
            </span>

            {{#price<?php echo $price_key; ?>_original_formated}}
                <span class="before_special">
                    {{price<?php echo $price_key; ?>_original_formated}}
                </span>
            {{/price<?php echo $price_key; ?>_original_formated}}
        </div>

        <div class="info">
            {{{_highlightResult.name.value}}}

            {{#categories_without_path}}
            <div class="algoliasearch-autocomplete-category">
                <?php echo $this->__('in'); ?> {{categories_without_path}}
            </div>
            {{/categories_without_path}}
        </div>
        <div class="clearfix"></div>
    </a>
</script>

<!-- Category hit template -->
<script type="text/template" id="autocomplete_categories_template">
    <a class="algoliasearch-autocomplete-hit" href="{{url}}">
        {{#image_url}}
        <div class="thumb">
            <img src="{{image_url}}" />
        </div>
        {{/image_url}}

        {{#image_url}}
        <div class="info">
            {{/image_url}}
            {{^image_url}}
            <div class="info-without-thumb">
                {{#_highlightResult.path}}
                    {{{_highlightResult.path.value}}}
                {{/_highlightResult.path}}
                {{^_highlightResult.path}}
                    {{{path}}}
                {{/_highlightResult.path}}

                {{#product_count}}
                <small>( {{product_count}} )</small>
                {{/product_count}}

            </div>
            <div class="clearfix"></div>
            {{/image_url}}
        </div>
    </a>
</script>

<!-- Page hit template -->
<script type="text/template" id="autocomplete_pages_template">
    <a class="algoliasearch-autocomplete-hit" href="{{url}}">
        <div class="info-without-thumb">
            {{{_highlightResult.name.value}}}
        </div>
        <div class="clearfix"></div>
    </a>
</script>

<!-- Extra attribute hit template -->
<script type="text/template" id="autocomplete_extra_template">
    <a class="algoliasearch-autocomplete-hit" href="{{url}}">
        <div class="info-without-thumb">
            {{{_highlightResult.value.value}}}
        </div>
        <div class="clearfix"></div>
    </a>
</script>

<!-- Suggestion hit template -->
<script type="text/template" id="autocomplete_suggestions_template">
    <a class="algoliasearch-autocomplete-hit" href="{{url}}">
        <div class="info-without-thumb">
            {{{_highlightResult.query.value}}}

            {{#category}}
                <span class="text-muted"><?php echo $this->__('in'); ?></span> <span class="category-tag">{{category}}</span>
            {{/category}}
        </div>
        <div class="clearfix"></div>
    </a>
</script>


<!--
//================================
//
// Instant search results page
//
//================================
-->



<!-- Wrapping template -->
<script type="text/template" id="instant_wrapper_template">

    <div id="algolia_instant_selector"<?php echo count($config->getFacets()) > 0 ? ' class="with-facets"' : '' ?>>

        <div class="row">
            <div class="col-md-offset-3 col-md-9">
                <div id="algolia-static-content">
                    <div class="page-title category-title">
                        <h1><?php echo $title; ?></h1>
                    </div>
                    <?php echo $content; ?>
                </div>
                <div>
                    {{#second_bar}}
                    <div id="instant-search-bar-container">
                        <div id="instant-search-box">
                            <label for="instant-search-bar">
                                <?php echo $this->__('Search :'); ?>
                            </label>

                            <input value="<?php echo ($catalogSearchHelper->getEscapedQueryText() !== '__empty__' ? $catalogSearchHelper->getEscapedQueryText() : '') ?>" placeholder="<?php echo $this->__('Search for products'); ?>" id="instant-search-bar" type="text" autocomplete="off" spellcheck="false" autocorrect="off" autocapitalize="off" />

                            <svg xmlns="http://www.w3.org/2000/svg" class="magnifying-glass" width="24" height="24" viewBox="0 0 128 128">
                                <g transform="scale(4)">
                                    <path stroke-width="3" d="M19.5 19.582l9.438 9.438"></path>
                                    <circle stroke-width="3" cx="12" cy="12" r="10.5" fill="none"></circle>
                                    <path d="M23.646 20.354l-3.293 3.293c-.195.195-.195.512 0 .707l7.293 7.293c.195.195.512.195.707 0l3.293-3.293c.195-.195.195-.512 0-.707l-7.293-7.293c-.195-.195-.512-.195-.707 0z"></path>
                                </g>
                            </svg>
                        </div>
                    </div>
                    {{/second_bar}}
                </div>
            </div>
        </div>

        <div class="row">
            <div class="col-md-3" id="algolia-left-container">
                <div id="refine-toggle" class="visible-xs visible-sm">+ <?php echo $this->__('Refine'); ?></div>
                <div class="hidden-xs hidden-sm" id="instant-search-facets-container"></div>
            </div>

            <div class="col-md-9" id="algolia-right-container">
                <div class="row">
                    <div>
                        <div class="hits">
                            <div class="infos">
                                <div class="pull-left" id="algolia-stats"></div>
                                <div class="pull-right" id="algolia-sorts"></div>
                                <div class="clearfix"></div>
                            </div>
                            <div id="instant-search-results-container"
                        </div>
                    </div>
                    <div class="clearfix"></div>
                </div>

                <div class="text-center">
                    <div id="instant-search-pagination-container"></div>
                </div>
            </div>
        </div>

    </div>
</script>

<script type="text/template" id="instant-hit-template">
    <div class="col-md-4 col-sm-6">
        <div class="result-wrapper">
            <a href="{{url}}" class="result">
                <div class="result-content">
                    <div class="result-thumbnail">
                        {{#image_url}}<img src="{{{ image_url }}}" />{{/image_url}}
                        {{^image_url}}<span class="no-image"></span>{{/image_url}}
                    </div>
                    <div class="result-sub-content">
                        <h3 class="result-title text-ellipsis">
                            {{{ _highlightResult.name.value }}}
                        </h3>
                        <div class="ratings">
                            <div class="result-sub-content">
                                <div class="ratings">
                                    <div class="rating-box">
                                        <div class="rating" style="width:{{rating_summary}}%" width="148" height="148"></div>
                                    </div>
                                </div>
                                <div class="price">
                                    <div class="algoliasearch-autocomplete-price">
                                        <div>
                                            <span class="after_special">
                                                {{price<?php echo $price_key; ?>_formated}}
                                            </span>

                                            {{#price<?php echo $price_key; ?>_original_formated}}
                                                <span class="before_special">
                                                    {{price<?php echo $price_key; ?>_original_formated}}
                                                </span>
                                            {{/price<?php echo $price_key; ?>_original_formated}}
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                        <div class="result-description text-ellipsis">{{{ _highlightResult.description.value }}}</div>

                        {{#isAddToCartEnabled}}
                            {{#in_stock}}
                                <form action="<?php echo $base_url; ?>/checkout/cart/add/product/{{objectID}}" method="post">
                                    <input type="hidden" name="form_key" value="<?php echo $formKey; ?>" />
                                    <input type="hidden" name="qty" value="1">
                                    <button type="submit"><?php echo $this->__('Add to Cart'); ?></button>
                                </form>
                            {{/in_stock}}
                        {{/isAddToCartEnabled}}
                    </div>
                </div>
                <div class="clearfix"></div>
            </a>
        </div>
    </div>
</script>

<script type="text/template" id="instant-stats-template">
    {{#hasNoResults}}<?php echo $this->__('No results'); ?>{{/hasNoResults}}
    {{#hasOneResult}}1 <?php echo $this->__('result'); ?>{{/hasOneResult}}
    {{#hasManyResults}}{{#helpers.formatNumber}}{{nbHits}}{{/helpers.formatNumber}} <?php echo $this->__('results'); ?>{{/hasManyResults}}
    {{#query}}<?php echo $this->__('matching'); ?> "<strong>{{query}}</strong>" {{/query}}
    <?php echo $this->__('in'); ?> {{processingTimeMS}}<?php echo $this->__('ms'); ?>
</script>

<script type="text/template" id="facet-template">
    <div class="sub_facet {{#isRefined}}checked{{/isRefined}}">
        <input class="facet_value" {{#isRefined}}checked{{/isRefined}} type="checkbox">
        {{name}}
        <span class="count">{{count}}</span>
    </div>
</script>

<!--
//================================
//
// JavaScript
//
//================================
-->


<script type="text/javascript">
    //<![CDATA[

    algoliaBundle.$(function($) {
        var algoliaConfig = {
            instant: {
                enabled: <?php echo $config->isInstantEnabled() ? "true" : "false"; ?>,
                selector: '<?php echo $config->getInstantSelector(); ?>',
                isAddToCartEnabled: <?php echo $config->isAddToCartEnable() ? "true" : "false"; ?>
            },
            autocomplete: {
                enabled: <?php echo $config->isAutoCompleteEnabled() ? "true" : "false"; ?>,
                selector: '#search',
                popularSuggestionsSection: {
                    hitsPerPage: <?php echo (int) $config->getNumberOfQuerySuggestions() ?>,
                    title: '<?php echo $this->__('Suggestions') ?>'
                },
                sections: {
                    products: {
                        hitsPerPage: <?php echo (int) $config->getNumberOfProductSuggestions() ?>,
                        title: '<?php echo $this->__('Products'); ?>'
                    },
                    categories: {
                        hitsPerPage: <?php echo (int) $config->getNumberOfCategorySuggestions() ?>,
                        title: '<?php echo $this->__('Categories') ?>'
                    },
                    pages: {
                        hitsPerPage: <?php echo (int) $config->getNumberOfPageSuggestions() ?>,
                        title: '<?php echo $this->__('Pages') ?>'
                    }
                },
                additionnalSections: <?php echo json_encode($config->getAutocompleteAdditionnalSections()); ?>,
                templates: {
                    suggestions: algoliaBundle.Hogan.compile($('#autocomplete_suggestions_template').html()),
                    products: algoliaBundle.Hogan.compile($('#autocomplete_products_template').html()),
                    categories: algoliaBundle.Hogan.compile($('#autocomplete_categories_template').html()),
                    pages: algoliaBundle.Hogan.compile($('#autocomplete_pages_template').html()),
                    additionnalSection: algoliaBundle.Hogan.compile($('#autocomplete_extra_template').html()),
                }
            },
            applicationId: '<?php echo $config->getApplicationID() ?>',
            indexName: '<?php echo $product_helper->getBaseIndexName(); ?>',
            apiKey: '<?php echo $config->getSearchOnlyAPIKey() ?>',
            facets: <?php echo json_encode($config->getFacets()); ?>,
            hitsPerPage: <?php echo (int) $config->getNumberOfProductResults() ?>,
            sortingIndices: <?php echo json_encode(array_values($config->getSortingIndices())); ?>,
            isSearchPage: <?php echo $isSearchPage ? "true" : "false" ?>,
            removeBranding: <?php echo $config->isRemoveBranding() ? "true" : "false"; ?>,
            priceKey: '<?php echo $price_key; ?>'
        };


        $('#search').closest('form').submit(function (e) {
            var query = $('#search').val();

            if (algoliaConfig.instant.enabled && query == '')
                query = '__empty__';

            var url = $(this).attr('action') + '?q=' + query;

            window.location = url;

            return false;
        });

        /*****************
         **
         ** INITIALIZATION
         **
         *****************/

        var algolia_client = algoliaBundle.algoliasearch(algoliaConfig.applicationId, algoliaConfig.apiKey);

        /*****************
         **
         ** AUTOCOMPLETION MENU
         **
         *****************/

        if (algoliaConfig.autocomplete.enabled) {
            var params = {};
            var sources = [];

            /// popular queries/suggestions
            if (algoliaConfig.autocomplete.popularSuggestionsSection.hitsPerPage > 0) {
                var suggestions_index = algolia_client.initIndex(algoliaConfig.indexName + "_suggestions");
                var products_index = algolia_client.initIndex(algoliaConfig.indexName + "_products");

                /// FIXME: ADD 'All department'
                sources.push({
                    source: $.fn.autocomplete.sources.popularIn(suggestions_index, {
                        hitsPerPage: algoliaConfig.autocomplete.popularSuggestionsSection.hitsPerPage
                    }, {
                        source: 'query',
                        index: products_index,
                        facets: ['categories.level0'],
                        hitsPerPage: 0,
                        typoTolerance: false,
                        maxValuesPerFacet: 3,
                        analytics: false
                    }, {
                        includeAll: true,
                        allTitle: '<?php echo $this->__('All departments') ?>'
                    }),
                    displayKey: 'query',
                    templates: {
                        suggestion: function (hit) {
                            if (hit.facet) {
                                hit.category = hit.facet.value;
                                /// FIXME: refinement
                                hit.url = '<?php echo $base_url; ?>/catalogsearch/result/?q=' + hit.query + '#q=' + hit.query + '&FIXME_REFINEMENT=' + hit.category + '&idx=<?php echo $product_helper->getBaseIndexName(); ?>_products';
                            } else {
                                hit.url = '<?php echo $base_url; ?>/catalogsearch/result/?q=' + hit.query;
                            }
                            return algoliaConfig.autocomplete.templates.suggestions.render(hit);
                        }
                    }
                });
            }

            /// regular auto-complete sections
            $.each(algoliaConfig.autocomplete.sections, function(indexName, section) {
                if (section.hitsPerPage > 0) {
                    var index = algolia_client.initIndex(algoliaConfig.indexName + "_" + indexName);

                    sources.push({
                        source: $.fn.autocomplete.sources.hits(index, {
                            hitsPerPage: section.hitsPerPage,
                            analyticsTags: 'autocomplete'
                        }),
                        templates: {
                            header: '<div class="category">' + section.title + '</div>',
                            suggestion: function (hit) {
                                if (indexName === 'products') {
                                    hit = tranformHit(hit)
                                } else if (indexName === 'categories') {
                                    hit.displayKey = hit.path;
                                }
                                hit.displayKey = hit.displayKey || hit.name;
                                return algoliaConfig.autocomplete.templates[indexName].render(hit);
                            }
                        }
                    });
                }
            });

            /// additional auto-complete sections
            $.each(algoliaConfig.autocomplete.additionnalSections, function(i, section) {
                var index = algolia_client.initIndex(algoliaConfig.indexName + "_section_" + section.attribute);
                var label = section.label || section.attribute;

                sources.push({
                    source: $.fn.autocomplete.sources.hits(index, {
                        hitsPerPage: section.hitsPerPage,
                        analyticsTags: 'autocomplete'
                    }),
                    displayKey: 'value',
                    templates: {
                        header: '<div class="category">' + label + '</div>',
                        suggestion: function (hit) {
                            hit.url = '<?php echo $base_url; ?>/catalogsearch/result/?q=' + hit.value + '&refinement_key=' + section.attribute + "&refinement_value=" + hit.value;
                            return algoliaConfig.autocomplete.templates.additionnalSection.render(hit);
                        }
                    }
                });
            });

            // setup the auto-completed search input
            $(algoliaConfig.autocomplete.selector).each(function (i) {
                var options = {hint: false};
                if (algoliaConfig.removeBranding === false) {
                    options.templates = {
                        footer: '<div class="footer_algolia"><a href="https://www.algolia.com/?utm_source=magento&utm_medium=link&utm_campaign=magento_autocompletion_menu" target="_blank"><img src="<?php echo $base_url; ?>/skin/frontend/base/default/algoliasearch/algolia-logo.png" /></a></div>'
                    };
                }
                $(this)
                    .autocomplete(options, sources)
                    .parent()
                    .attr('id', 'algolia-autocomplete-tt')
                    .on('autocomplete:selected', function (e, item) {
                        window.location.href = item.url;
                    });
            });
        }

        /*****************
         **
         ** INSTANT RESULTS PAGE SEARCH
         **
         *****************/

        if (algoliaConfig.instant.enabled && (<?php echo $isSearchPage ? "true" : "false"; ?> || !algoliaConfig.autocomplete.enabled))
        {
            if ($(algoliaConfig.instant.selector).length !== 1)
                throw '[Algolia] Invalid instant-search selector: ' + algoliaConfig.instant.selector;

            if (algoliaConfig.autocomplete.enabled && $(algoliaConfig.instant.selector).find(algoliaConfig.autocomplete.selector).length > 0)
                throw '[Algolia] You can\'t have a search input matching "' + algoliaConfig.autocomplete.selector +
                '" inside you instant selector "' + algoliaConfig.instant.selector + '"';

            var instant_selector = !algoliaConfig.autocomplete.enabled ? "#search" : "#instant-search-bar";

            var wrapperTemplate = algoliaBundle.Hogan.compile($('#instant_wrapper_template').html());

            $(algoliaConfig.instant.selector).html(wrapperTemplate.render({ second_bar: algoliaConfig.autocomplete.enabled })).show();

            /** Initialise instant search **/
            var search = algoliaBundle.instantsearch({
                appId: algoliaConfig.applicationId,
                apiKey: algoliaConfig.apiKey,
                indexName: algoliaConfig.indexName + '_products'
            });

            /** Search bar **/
            search.addWidget(
                algoliaBundle.instantsearch.widgets.searchBox({
                    container: instant_selector,
                    placeholder: 'Search for products'
                })
            );

            /** Stats **/
            search.addWidget(
                algoliaBundle.instantsearch.widgets.stats({
                    container: '#algolia-stats',
                    templates: {
                        body: $('#instant-stats-template').html()
                    }
                })
            );

            /** Sorts **/
            algoliaConfig.sortingIndices.unshift({name: algoliaConfig.indexName + '_products', label: '<?php echo $this->__('Relevance'); ?>'});

            search.addWidget(
                algoliaBundle.instantsearch.widgets.indexSelector({
                    container: '#algolia-sorts',
                    indices: algoliaConfig.sortingIndices,
                    cssClass: 'form-control'
                })
            );

            /** Hits **/
            search.addWidget(
                algoliaBundle.instantsearch.widgets.hits({
                    container: '#instant-search-results-container',
                    templates: {
                        empty: '<div class="no-results"><?php echo $this->__('No results found matching'); ?> "<strong>{{query}}</strong>". <span class="button clear-button"><?php echo $this->__('Clear query and filters'); ?></span> </div>',
                        hit: $('#instant-hit-template').html()
                    },
                    transformData: {
                      hit: function (hit) {
                          hit = tranformHit(hit);
                          hit.isAddToCartEnabled = algoliaConfig.instant.isAddToCartEnabled;

                          return hit;
                      }
                    },
                    hitsPerPage: algoliaConfig.hitsPerPage
                })
            );

            /** Facets **/
            var wrapper = document.getElementById('instant-search-facets-container');
            var facetTemplate = $('#facet-template').html();

            $.each(algoliaConfig.facets, function (i, facet) {

                if (facet.attribute.indexOf("price") !== -1)
                    facet.attribute = facet.attribute + algoliaConfig.priceKey;

                facet.template  = facetTemplate;
                facet.wrapper   = wrapper;

                console.log(facet);
                search.addWidget(getFacetWidget(facet, {
                    item:   facet.template,
                    header: '<div class="name">' + (facet.label ? facet.label : facet.attribute) + '</div>',
                }));
            });
            
            /** Pagination **/
            search.addWidget(
                algoliaBundle.instantsearch.widgets.pagination({
                    container: '#instant-search-pagination-container',
                    cssClass: 'algolia-pagination',
                    showFirstLast: true,
                    labels: {
                        prev: '‹', // &lsaquo;
                        next: '›', // &rsaquo;
                        first: '«', // &laquo;
                        last: '»' // &raquo;
                    },
                    scrollTo: false
                })
            );

            /** Url sync **/
            search.addWidget(
                algoliaBundle.instantsearch.widgets.urlSync({
                    useHash: true,
                    threshold: 5000,
                    trackedParameters: ['query', 'page', 'attribute:*', 'index']
                })
            );

            search.start();
        }
    });

    //]]>
</script>
