<?php
$catalogSearchHelper = $this->helper('catalogsearch'); /** @var $catalogSearchHelper Mage_CatalogSearch_Helper_Data */
$algoliaSearchHelper = $this->helper('algoliasearch'); /** @var $algoliaSearchHelper Algolia_Algoliasearch_Helper_Data */
?>


<form id="search_mini_form" action="<?php echo $catalogSearchHelper->getResultUrl() ?>" method="get">
    <div class="form-search">
        <label for="search"><?php echo $this->__('Search:') ?></label>
        <input id="search" type="text" name="<?php echo $catalogSearchHelper->getQueryParamName() ?>" value="<?php echo $catalogSearchHelper->getEscapedQueryText() ?>" class="input-text" autocomplete="off" spellcheck="false" autocorrect="off" autocapitalize="off" />
        <div id="search_autocomplete" class="algoliasearch-autocomplete">
            <div class="result-set" id="search_autocomplete_categories"></div>
            <div class="result-set" id="search_autocomplete_products"></div>
            <div class="result-set" id="search_autocomplete_pages"></div>
        </div>
    </div>
</form>

<script type="text/template" id="autocomplete_products_template">
    <a class="algoliasearch-autocomplete-hit" href="{{url}}">
        {{#thumbnail_url}}
        <div class="thumb"><img src="{{thumbnail_url}}" /></div>
        {{/thumbnail_url}}
        <div class="info">
            {{{_highlightResult.name.value}}}

            {{#categories}}
            <div class="algoliasearch-autocomplete-category">
                in {{categories}}
            </div>
            {{/categories}}

            {{#price}}
            <div class="algoliasearch-autocomplete-price">
                {{price}} $
            </div>
            {{/price}}
        </div>
        <div style="clear: both;"></div>
    </a>
</script>

<script type="text/template" id="autocomplete_categories_template">
    <a class="algoliasearch-autocomplete-hit" href="{{url}}">
        {{#image_url}}
        <div class="thumb">
            <img src="{{image_url}}" />
        </div>
        {{/image_url}}

        {{#image_url}}
        <div class="info">
            {{/image_url}}
            {{^image_url}}
            <div class="info-without-thumb">
                {{{_highlightResult.path.value}}}

                {{#product_count}}
                <small>( {{product_count}} )</small>
                {{/product_count}}

            </div>
            <div style="clear: both;"></div>
            {{/image_url}}
    </a>
</script>

<script type="text/template" id="autocomplete_pages_template">
    <a class="algoliasearch-autocomplete-hit" href="{{url}}">
        <div class="info-without-thumb">
            {{{_highlightResult.name.value}}}
        </div>
        <div style="clear: both;"></div>
    </a>
</script>

<script type="text/template" id="instant-content-template">
    <div class="hits{{#facets_count}} with_facets{{/facets_count}}">
        {{#hits.length}}
        <div class="infos">
            <div style="float: left">
                {{nbHits}} result{{^nbHits_one}}s{{/nbHits_one}} found {{#query}}matching "<strong>{{query}}</strong>" {{/query}}in {{processingTimeMS}} ms
            </div>
            <div style="float: right;">
                <img src="/skin/frontend/base/default/algoliasearch/algolia-logo.png">
            </div>
            {{#sorting_indices.length}}
            <div style="float: right; margin-right: 10px;">
                Order by
                <select id="index_to_use">
                    <option {{#sortSelected}}{{relevance_index_name}}{{/sortSelected}} value="{{relevance_index_name}}">Relevance</option>
                    {{#sorting_indices}}
                    <option {{#sortSelected}}{{index_name}}{{/sortSelected}} value="{{index_name}}">{{label}}</option>
                    {{/sorting_indices}}
                </select>
            </div>
            {{/sorting_indices.length}}
            <div style="clear: both;"></div>
        </div>
        {{/hits.length}}

        {{#hits}}
        <div class="result-wrapper">
            <div class="result">
                <div class="result-content">
                    <div class="result-thumbnail" style="float: left; padding-right: 10px;">
                        {{#image_url}}
                        <a href="{{permalink}}">
                            <img src="{{{ image_url }}}" style="width: 105px; max-height: 148px;" />
                        </a>
                        {{/image_url}}
                        {{^image_url}}
                        <div style="width: 105px; height: 148px;"></div>
                        {{/image_url}}
                    </div>
                    <div class="result-sub-content" style="display: table-cell; width: 100000px;">
                        <h1 class="result-title">
                            <a href="{{permalink}}">
                                <div class="price">{{price_with_tax}}â‚¬</div>
                                {{{ _highlightResult.name.value }}}
                            </a>
                        </h1>
                        <div class="result-excerpt">
                            {{{ _highlightResult.short_description.value }}}
                        </div>
                    </div>
                </div>
                <div style="clear: both"></div>
            </div>
        </div>
        {{/hits}}
        {{^hits.length}}
        <div class="infos">
            No results found matching "<strong>{{query}}</strong>". <span class="clear">Clear query and filters</span>
        </div>
        {{/hits.length}}
        <div style="clear: both;"></div>
    </div>
</script>

<script type="text/template" id="instant-facets-template">
    <div class="facets{{#count}} with_facets{{/count}}">
        {{#facets}}
        {{#count}}
        <div class="facet">
            <div class="name">
                {{ facet_categorie_name }}
            </div>
            <div>
                {{#sub_facets}}

                {{#type.menu}}
                <div data-attribute="{{attribute}}" data-name="{{nameattr}}" data-type="menu" class="{{#checked}}checked {{/checked}}sub_facet menu">
                    <input style="display: none;" data-attribute="{{attribute}}" {{#checked}}checked{{/checked}} data-name="{{nameattr}}" class="facet_value" type="checkbox" />
                    {{name}} {{#print_count}}({{count}}){{/print_count}}
                </div>
                {{/type.menu}}

                {{#type.conjunctive}}
                <div data-name="{{attribute}}" data-type="conjunctive" class="{{#checked}}checked {{/checked}}sub_facet conjunctive">
                    <input style="display: none;" data-attribute="{{attribute}}" {{#checked}}checked{{/checked}} data-name="{{nameattr}}" class="facet_value" type="checkbox" />
                    {{name}} ({{count}})
                </div>
                {{/type.conjunctive}}

                {{#type.slider}}
                <div class="algolia-slider algolia-slider-true" data-attribute="{{attribute}}" data-min="{{min}}" data-max="{{max}}"></div>
                <div class="algolia-slider-info">
                    <div class="min" style="float: left;">{{current_min}}</div>
                    <div class="max" style="float: right;">{{current_max}}</div>
                    <div style="clear: both"></div>
                </div>
                {{/type.slider}}

                {{#type.disjunctive}}
                <div data-name="{{attribute}}" data-type="disjunctive" class="{{#checked}}checked {{/checked}}sub_facet disjunctive">
                    <input data-attribute="{{attribute}}" {{#checked}}checked{{/checked}} data-name="{{nameattr}}" class="facet_value" type="checkbox" />
                    {{name}} ({{count}})
                </div>
                {{/type.disjunctive}}

                {{/sub_facets}}
            </div>
        </div>
        {{/count}}
        {{/facets}}
    </div>
</script>

<script type="text/template" id="instant-pagination-template">
    <div class="pagination-wrapper{{#facets_count}} with_facets{{/facets_count}}">
        <div class="text-center">
            <ul class="algolia-pagination">
                <a href="#" data-page="{{prev_page}}">
                    <li {{^prev_page}}class="disabled"{{/prev_page}}>
                    &laquo;
                    </li>
                </a>

                {{#pages}}
                <a href="#" data-page="{{number}}" return false;">
                <li class="{{#current}}active{{/current}}{{#disabled}}disabled{{/disabled}}">
                    {{ number }}
                </li>
                </a>
                {{/pages}}
                <a href="#" data-page="{{next_page}}">
                    <li {{^next_page}}class="disabled"{{/next_page}}>
                    &raquo;
                    </li>
                </a>
            </ul>
        </div>
    </div>
</script>

<script type="text/javascript">
    //<![CDATA[

    var autocompleteEnabled = "<?php echo $algoliaSearchHelper->isPopupEnabled(); ?>" == "1" ? true : false;
    var instantEnabled      = "<?php echo $algoliaSearchHelper->isInstantEnabled(); ?>" == "1" ? true : false;

    var algoliaSettings     = {};

    algoliaSettings.facets                  = <?php echo json_encode($algoliaSearchHelper->getFacets()); ?>;
    algoliaSettings.instant_selector        = '<?php echo $algoliaSearchHelper->getInstantSelector(); ?>';
    algoliaSettings.hits_by_page            = <?php echo (int) $algoliaSearchHelper->getNumberOfProductResults() ?>;
    algoliaSettings.sorting_indices         = <?php echo json_encode(array_values($algoliaSearchHelper->getSortingIndices())); ?>;
    algoliaSettings.indexName               = '<?php echo $algoliaSearchHelper->getIndexName() ?>';
    algoliaSettings.search_input_selector   = '#search';

    var applicationID           = '<?php echo $algoliaSearchHelper->getApplicationID() ?>';
    var apiKey                  = '<?php echo $algoliaSearchHelper->getSearchOnlyAPIKey() ?>';

    var algolia_client      = algoliasearch(applicationID, apiKey);

    $algoliaJQuery(document).ready(function($) {

        if (autocompleteEnabled)
        {
            var params = {};

            params.autocomplete_products_template      = Hogan.compile($('#autocomplete_products_template').html());
            params.autocomplete_categories_template    = Hogan.compile($('#autocomplete_categories_template').html());
            params.autocomplete_pages_template         = Hogan.compile($('#autocomplete_pages_template').html());

            params.products_hitsPerPage                = <?php echo (int) $algoliaSearchHelper->getNumberOfProductSuggestions() ?>;
            params.categories_hitsPerPage              = <?php echo (int) $algoliaSearchHelper->getNumberOfCategorySuggestions() ?>;
            params.pages_hitsPerPage                   = <?php echo (int) $algoliaSearchHelper->getNumberOfPageSuggestions() ?>;

            params.autocomplete_products_title          = '<?php echo $this->__('Products'); ?>';
            params.autocomplete_categories_title       = '<?php echo $this->__('Categories') ?>';
            params.autocomplete_pages_title            = '<?php echo $this->__('Pages') ?>';

            var hogan_objs = [];

            var indices = ['categories', 'products', 'pages'];

            for (var i = 0; i < indices.length; i++)
            {
                if (params[indices[i] + '_hitsPerPage'] > 0)
                {
                    var index = algolia_client.initIndex(algoliaSettings.indexName + "_" + indices[i]);

                    hogan_objs.push({
                        source: index.ttAdapter({hitsPerPage: params[indices[i] + '_hitsPerPage']}),
                        templates: {
                            header: '<div class="category">' + params['autocomplete_' + indices[i] + '_title'] + '</div>',
                            suggestion: (function (i) {
                                return function (hit) {
                                    if (indices[i] == 'products')
                                    {
                                        if (Array.isArray(hit.categories))
                                            hit.categories = hit.categories.join(', ');

                                        if (Array.isArray(hit._highlightResult.name))
                                            hit._highlightResult.name = hit._highlightResult.name[0];

                                        if (Array.isArray(hit.price))
                                            hit.price = hit.price[0];
                                    }
                                    return params['autocomplete_' + indices[i] + '_template'].render(hit);
                                }
                            })(i)
                        }
                    });
                }
            }

            hogan_objs.push({
                source: function () {
                    return function findMatches(q, cb) {
                        return cb(["algolia-branding"]);
                    }
                },
                displayKey: 'title',
                templates: {
                    suggestion: function (hit) {
                        return '<div class="footer">powered by <img width="45" src="/skin/frontend/base/default/algoliasearch/algolia-logo.png"></div>';
                    }
                }
            });

            function activateAutocomplete()
            {
                $(algoliaSettings.search_input_selector).each(function (i) {
                    $(this).typeahead({hint: false}, hogan_objs);

                    $(this).on('typeahead:selected', function (e, item) {
                        autocomplete = false;
                        instant = false;
                        window.location.href = item.url;
                    });
                });
            }

            activateAutocomplete();

            function desactivateAutocomplete()
            {
                $(algoliaSettings.search_input_selector).each(function (i) {
                    $(this).typeahead('destroy');
                });
            }
        }

        if (instantEnabled)
        {
            if ($(algoliaSettings.instant_selector).length !== 1)
                throw '[Algolia] Invalid instant-search selector: ' + algoliaSettings.instant_selector;

            if ($(algoliaSettings.instant_selector).find(algoliaSettings.search_input_selector).length > 0)
                throw '[Algolia] You can\'t have a search input matching "' + algoliaSettings.search_input_selector +
                '" inside you instant selector "' + algoliaSettings.instant_selector + '"';

            var old_content         = $(algoliaSettings.instant_selector).html();

            var resultsTemplate     = Hogan.compile($('#instant-content-template').html());
            var facetsTemplate      = Hogan.compile($('#instant-facets-template').html());
            var paginationTemplate  = Hogan.compile($('#instant-pagination-template').html());

            var conjunctive_facets  = [];
            var disjunctive_facets  = [];

            /**
             *  Foreach Type decide if it need to have a conjunctive or dijunctive faceting
             *
             *  When you create a custom facet type you need to add it here.
             *
             *  Example : 'menu'
             */
            for (var i = 0; i < algoliaSettings.facets.length; i++)
            {
                if (algoliaSettings.facets[i].type == "conjunctive")
                    conjunctive_facets.push(algoliaSettings.facets[i].attribute);

                if (algoliaSettings.facets[i].type == "disjunctive")
                    disjunctive_facets.push(algoliaSettings.facets[i].attribute);

                if (algoliaSettings.facets[i].type == "slider")
                    disjunctive_facets.push(algoliaSettings.facets[i].attribute);

                if (algoliaSettings.facets[i].type == "menu")
                    disjunctive_facets.push(algoliaSettings.facets[i].attribute);
            }

            var helper = algoliasearchHelper(algolia_client, algoliaSettings.indexName + '_products', {
                facets: conjunctive_facets,
                disjunctiveFacets: disjunctive_facets,
                hitsPerPage: algoliaSettings.hits_by_page
            });

            function activateInstant()
            {
                helper.on('result', searchCallback);
            }

            activateInstant();

            function desactivateInstant()
            {
                helper.removeAllListeners();

                location.replace('#');

                $(algoliaSettings.instant_selector).html(old_content);
            }

            /**
             * The engine object definition is in /skin/frontend/base/default/algoliasearch
             *
             * It define a default functions for instant search.
             *
             * You should not modify it directly, instead you can create the same function on this file
             * modify it and change the call from engine.FUNCTION(...) to FUNCTION(...)
             */
            engine.setHelper(helper);




            function performQueries(push_state)
            {
                engine.helper.search(engine.helper.state.query, searchCallback);

                engine.updateUrl(push_state);
            }

            function searchCallback(content)
            {
                /**
                 *  Modify results to be able to print it with Hogan
                 */
                for (var i = 0; i < content.hits.length; ++i)
                {
                    if (Array.isArray(content.hits[i].categories))
                        content.hits[i].categories = content.hits[i].categories.join(', ');

                    if (Array.isArray(content.hits[i]._highlightResult.name))
                        content.hits[i]._highlightResult.name = content.hits[i]._highlightResult.name[0];

                    if (Array.isArray(content.hits[i].price))
                        content.hits[i].price = content.hits[i].price[0];
                }

                /**
                 * Generate HTML
                 */
                var html_content = "";

                html_content += "<div id='algolia_instant_selector'>";

                var facets = [];
                var pages = [];

                if (content.hits.length > 0)
                {
                    facets = engine.getFacets(content);
                    pages = engine.getPages(content);

                    html_content += engine.getHtmlForFacets(facetsTemplate, facets);
                }

                html_content += engine.getHtmlForResults(resultsTemplate, content, facets);

                if (content.hits.length > 0)
                    html_content += engine.getHtmlForPagination(paginationTemplate, content, pages, facets);

                html_content += "</div>";

                $(algoliaSettings.instant_selector).html(html_content);

                updateSliderValues();
            }

            /**
             * Example of a custom facet type
             */
            custom_facets_types["menu"] = function (engine, content, facet) {

                var data = [];

                var all_count = 0;
                var all_unchecked = true;

                var content_facet = content.getFacetByName(facet.attribute);

                if (content_facet == undefined)
                    return data;

                for (var key in content_facet.data)
                {
                    var checked = engine.helper.isRefined(facet.attribute, key);

                    all_unchecked = all_unchecked && !checked;

                    var name = window.facetsLabels && window.facetsLabels[key] != undefined ? window.facetsLabels[key] : key;
                    var explode = name.split(' /// ');
                    var nameattr = explode[explode.length - 1];

                    var params = {
                        type: {},
                        checked: checked,
                        nameattr: nameattr,
                        name: name,
                        print_count: true,
                        count: content_facet.data[key]
                    };

                    all_count += content_facet.data[key];

                    params.type[facet.type] = true;

                    data.push(params);
                }

                var params = {
                    type: {},
                    checked: all_unchecked,
                    nameattr: 'all',
                    name: 'All',
                    print_count: false,
                    count: all_count
                };

                params.type[facet.type] = true;

                data.unshift(params);

                return data;
            };

            /**
             * Handle click on menu custom facet
             */
            $("body").on("click", ".sub_facet.menu", function (e) {

                e.stopImmediatePropagation();

                if ($(this).attr("data-name") == "all")
                    engine.helper.state.clearRefinements($(this).attr("data-attribute"));

                $(this).find("input[type='checkbox']").each(function (i) {
                    $(this).prop("checked", !$(this).prop("checked"));

                    if (false == engine.helper.isRefined($(this).attr("data-attribute"), $(this).attr("data-name")))
                        engine.helper.state.clearRefinements($(this).attr("data-attribute"));

                    if ($(this).attr("data-name") != "all")
                        engine.helper.toggleRefine($(this).attr("data-attribute"), $(this).attr("data-name"));
                });

                performQueries(true);
            });

            /**
             * Handle click on conjunctive and disjunctive facet
             */
            $("body").on("click", ".sub_facet", function () {

                $(this).find("input[type='checkbox']").each(function (i) {
                    $(this).prop("checked", !$(this).prop("checked"));

                    engine.helper.toggleRefine($(this).attr("data-attribute"), $(this).attr("data-name"));
                });

                performQueries(true);
            });

            /**
             * Handle jquery-ui slider initialisation
             */
            $("body").on("slide", "", function (event, ui) {
                updateSlideInfos(ui);
            });

            /**
             * Handle sort change
             */
            $("body").on("change", "#index_to_use", function () {
                engine.helper.setIndex($(this).val());

                engine.helper.setCurrentPage(0);

                performQueries(true);
            });

            /**
             * Handle jquery-ui slide event
             */
            $("body").on("slidechange", ".algolia-slider-true", function (event, ui) {

                var slide_dom = $(ui.handle).closest(".algolia-slider");
                var min = slide_dom.slider("values")[0];
                var max = slide_dom.slider("values")[1];

                if (parseInt(slide_dom.slider("values")[0]) >= parseInt(slide_dom.attr("data-min")))
                    engine.helper.addNumericRefinement(slide_dom.attr("data-attribute"), ">=", min);
                if (parseInt(slide_dom.slider("values")[1]) <= parseInt(slide_dom.attr("data-max")))
                    engine.helper.addNumericRefinement(slide_dom.attr("data-attribute"), "<=", max);

                if (parseInt(min) == parseInt(slide_dom.attr("data-min")))
                    engine.helper.removeNumericRefinement(slide_dom.attr("data-attribute"), ">=");

                if (parseInt(max) == parseInt(slide_dom.attr("data-max")))
                    engine.helper.removeNumericRefinement(slide_dom.attr("data-attribute"), "<=");

                updateSlideInfos(ui);
                performQueries(true);
            });

            /**
             * Handle page change
             */
            $("body").on("click", ".algolia-pagination a", function (e) {
                e.preventDefault();

                engine.gotoPage($(this).attr("data-page"));
                performQueries(true);

                $("body").scrollTop(0);

                return false;
            });

            /** Handle input clearing **/
            $('body').on('click', '.clear', function () {
                engine.helper.clearRefinements();
                $(algoliaSettings.search_input_selector).val('').keyup();
            });

            /**
             * Handle search
             */
            $(algoliaSettings.search_input_selector).keyup(function (e) {
                e.preventDefault();

                if (instantEnabled === false)
                    return;

                var $this = $(this);

                engine.helper.setQuery($(this).val());

                /** Update all search input to reflect the change **/
                $(algoliaSettings.search_input_selector).each(function (i) {
                    if ($(this)[0] != $this[0])
                        $(this).val(engine.helper.state.query);
                });

                /** If escape **/
                if (e.keyCode === 27) {

                    clearTimeout(history_timeout);

                    location.replace('#');

                    $(algoliaSettings.instant_selector).html(old_content);

                    return;
                }

                /* Uncomment to clear refinements on keyup */

                //engine.helper.clearRefinements();


                performQueries(false);

                return false;
            });

            function updateSliderValues()
            {
                $(".algolia-slider-true").each(function (i) {
                    var min = $(this).attr("data-min");
                    var max = $(this).attr("data-max");

                    var new_min = engine.helper.state.getNumericRefinement($(this).attr("data-attribute"), ">=");
                    var new_max = engine.helper.state.getNumericRefinement($(this).attr("data-attribute"), "<=");

                    if (new_min != undefined)
                        min = new_min;

                    if (new_max != undefined)
                        max = new_max;

                    $(this).slider({
                        min: parseInt($(this).attr("data-min")),
                        max: parseInt($(this).attr("data-max")),
                        range: true,
                        values: [min, max]
                    });
                });
            }

            function updateSlideInfos(ui)
            {
                var infos = $(ui.handle).closest(".algolia-slider").nextAll(".algolia-slider-info");

                infos.find(".min").html(ui.values[0]);
                infos.find(".max").html(ui.values[1]);
            }

            /**
             * Initialization
             */

            /** Clean input **/
            $(algoliaSettings.search_input_selector).attr('autocomplete', 'off').attr('autocorrect', 'off').attr('spellcheck', 'false').attr('autocapitalize', 'off');

            engine.getRefinementsFromUrl(algoliaSettings.search_input_selector);

            window.addEventListener("popstate", function(e) {
                engine.getRefinementsFromUrl(algoliaSettings.search_input_selector);
            });


            if (autocompleteEnabled && instantEnabled)
            {
                if (location.hash.length <= 1)
                {
                    desactivateInstant();
                    instantEnabled = false;
                }
                else
                {
                    autocompleteEnabled = false;
                    desactivateAutocomplete();
                    $(algoliaSettings.search_input_selector+':first').focus();
                }
            }
        }
    });


    //]]>
</script>
