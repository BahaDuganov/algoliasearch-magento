<?php

$config = Mage::helper('algoliasearch/config');
$catalogSearchHelper = $this->helper('catalogsearch'); /** @var $catalogSearchHelper Mage_CatalogSearch_Helper_Data */
$algoliaSearchHelper = $this->helper('algoliasearch'); /** @var $algoliaSearchHelper Algolia_Algoliasearch_Helper_Data */
$product_helper = Mage::helper('algoliasearch/entity_producthelper');

$base_url = Mage::getBaseUrl();

$isSearchPage = false;

$group_id = Mage::getSingleton('customer/session')->getCustomerGroupId();
$price_key = $config->isCustomerGroupsEnabled(Mage::app()->getStore()->getStoreId()) ? '.group_'.$group_id : '.default';

$allDepartments = "All departments";

$query = '';
$refinement_key = '';
$refinement_value = '';
$path = '';

/**
 * Handle category replacement
 */
if($config->isInstantEnabled() && $config->replaceCategories() && Mage::app()->getRequest()->getControllerName() == 'category')
{
    $category = Mage::registry('current_category');

    if ($category && $category->getDisplayMode() !== 'PAGE')
    {
        $category->getUrlInstance()->setStore(Mage::app()->getStore()->getStoreId());

        foreach ($category->getPathIds() as $treeCategoryId) {
            if ($path != '') {
                $path .= ' /// ';
            }

            $path .= $product_helper->getCategoryName($treeCategoryId, Mage::app()->getStore()->getStoreId());
        }

        $indexName = $product_helper->getIndexName(Mage::app()->getStore()->getStoreId());
        $category_url = $category->getUrl($category);
        $isSearchPage = true;
    }
}

/**
 * Handle search
 */
if ($config->isInstantEnabled())
{
    $pageIdentifier = Mage::app()->getFrontController()->getAction()->getFullActionName();

    if ($pageIdentifier === 'catalogsearch_result_index')
    {
        $query = $catalogSearchHelper->getEscapedQueryText();

        if ($query == '__empty__')
            $query = '';

        $product_helper = Mage::helper('algoliasearch/entity_producthelper');

        //$query = htmlentities($query, ENT_COMPAT, "UTF-8");

        $refinement_key = Mage::app()->getRequest()->getParam('refinement_key');

        if ($refinement_key !== null)
        {
            $refinement_value = $query;
            $query = "";
        }
        else
            $refinement_key = "";

        $isSearchPage = true;
    }
}

if ($base_url[strlen($base_url) - 1] == '/')
    $base_url = substr($base_url, 0, strlen($base_url) - 1);

if ($config->isInstantEnabled() && $isSearchPage) {
    // hide the instant-search selector ASAP to remove flickering. Will be re-displayed later with JS
    echo '<style>' . $config->getInstantSelector() . '{ display: none; }</style>';
}

?>

<script>
    document.addEventListener("DOMContentLoaded", function(event) {
        algoliaBundle.$(function ($) {
            window.algoliaConfig = {
                instant: {
                    enabled: <?php echo $config->isInstantEnabled() ? "true" : "false"; ?>,
                    selector: '<?php echo $config->getInstantSelector(); ?>',
                    isAddToCartEnabled: <?php echo $config->isAddToCartEnable() ? "true" : "false"; ?>
                },
                autocomplete: {
                    enabled: <?php echo $config->isAutoCompleteEnabled() ? "true" : "false"; ?>,
                    selector: '.algolia-search-input',
                    sections: <?php echo json_encode($config->getAutocompleteSections()); ?>
                },
                applicationId: '<?php echo $config->getApplicationID() ?>',
                indexName: '<?php echo $product_helper->getBaseIndexName(); ?>',
                apiKey: '<?php echo $config->getSearchOnlyAPIKey() ?>',
                facets: <?php echo json_encode($config->getFacets()); ?>,
                hitsPerPage: <?php echo (int) $config->getNumberOfProductResults() ?>,
                sortingIndices: <?php echo json_encode(array_values($config->getSortingIndices())); ?>,
                isSearchPage: <?php echo $isSearchPage ? "true" : "false" ?>,
                removeBranding: <?php echo $config->isRemoveBranding() ? "true" : "false"; ?>,
                priceKey: '<?php echo $price_key; ?>',
                currencySymbol: '<?php echo Mage::app()->getLocale()->currency(Mage::app()->getStore()->getCurrentCurrencyCode())->getSymbol(); ?>',
                request: {
                    query: <?php echo json_encode(array("value" => html_entity_decode($query))); ?>.value,
                    refinement_key: '<?php echo $refinement_key; ?>',
                    refinement_value: '<?php echo $refinement_value; ?>',
                    path: '<?php echo $path; ?>'
                },
                showSuggestionsOnNoResultsPage: <?php echo $config->showSuggestionsOnNoResultsPage() ? "true" : "false"; ?>,
                baseUrl: '<?php echo $base_url ?>'
            };

            window.transformHit = function (hit, price_key) {
                if (Array.isArray(hit.categories))
                    hit.categories = hit.categories.join(', ');

                if (Array.isArray(hit.categories_without_path)) {
                    hit.categories_without_path = hit.categories_without_path.join(', ');
                }

                if (Array.isArray(hit._highlightResult.name))
                    hit._highlightResult.name = hit._highlightResult.name[0];

                if (Array.isArray(hit.price))
                    hit.price = hit.price[0];

                if (price_key !== '.default' && hit['price'][price_key.substr(1) + '_formated'] !== hit['price']['default_formated']) {
                    hit['price'][price_key.substr(1) + '_original_formated'] = hit['price']['default_formated'];
                }

                return hit;
            };

            window.getFacetWidget = function (facet, templates) {

                if (facet.type === 'priceRanges') {
                    return algoliaBundle.instantsearch.widgets.priceRanges({
                        container: facet.wrapper.appendChild(document.createElement('div')),
                        attributeName: facet.attribute,
                        labels: {
                            currency: algoliaConfig.currencySymbol,
                            separator: '<?php echo $this->__("to"); ?>',
                            button: '<?php echo $this->__("Go"); ?>'
                        },
                        templates: templates,
                        cssClasses: {
                            root: 'facet conjunctive'
                        }
                    })
                }

                if (facet.type === 'conjunctive') {
                    return algoliaBundle.instantsearch.widgets.refinementList({
                        container: facet.wrapper.appendChild(document.createElement('div')),
                        attributeName: facet.attribute,
                        operator: 'and',
                        templates: templates,
                        cssClasses: {
                            root: 'facet conjunctive'
                        }
                    });
                }

                if (facet.type === 'disjunctive') {
                    return algoliaBundle.instantsearch.widgets.refinementList({
                        container: facet.wrapper.appendChild(document.createElement('div')),
                        attributeName: facet.attribute,
                        operator: 'or',
                        templates: templates,
                        cssClasses: {
                            root: 'facet disjunctive'
                        }
                    });
                }

                if (facet.type == 'slider') {
                    return algoliaBundle.instantsearch.widgets.rangeSlider({
                        container: facet.wrapper.appendChild(document.createElement('div')),
                        attributeName: facet.attribute,
                        templates: templates,
                        cssClasses: {
                            root: 'facet slider'
                        }
                    });
                }
            };

            window.getAutocompleteSource = function (section, algolia_client, $, i) {
                if (section.hitsPerPage <= 0)
                    return null;

                var source;
                if (section.name === "products" || section.name === "categories" || section.name === "pages")
                {
                    var options = {
                        hitsPerPage: section.hitsPerPage,
                        analyticsTags: 'autocomplete'
                    };

                    if (section.name === 'products') {
                        options.facets = ['categories.level0'];
                    }
                    source =  {
                        source: $.fn.autocomplete.sources.hits(algolia_client.initIndex(algoliaConfig.indexName + "_" + section.name), options),
                        name: section.name == 'products' ? 'products' : i,
                        templates: {
                            empty: '<div class="aa-no-results">No results</div>',
                            suggestion: function (hit) {
                                if (section.name === 'products') {
                                    hit = transformHit(hit, algoliaConfig.priceKey)
                                } else if (section.name === 'categories') {
                                    hit.displayKey = hit.path;
                                }
                                hit.displayKey = hit.displayKey || hit.name;
                                return algoliaConfig.autocomplete.templates[section.name].render(hit);
                            }
                        }
                    };
                }
                else if (section.name === "suggestions")
                {
                    /// popular queries/suggestions
                    var suggestions_index = algolia_client.initIndex(algoliaConfig.indexName + "_suggestions");
                    var products_index = algolia_client.initIndex(algoliaConfig.indexName + "_products");

                    source = {
                        source: $.fn.autocomplete.sources.popularIn(suggestions_index, {
                            hitsPerPage: section.hitsPerPage
                        }, {
                            source: 'query',
                            index: products_index,
                            facets: ['categories.level0'],
                            hitsPerPage: 0,
                            typoTolerance: false,
                            maxValuesPerFacet: 1,
                            analytics: false
                        }, {
                            includeAll: true,
                            allTitle: '<?php echo $this->__($allDepartments) ?>'
                        }),
                        displayKey: 'query',
                        name: section.name,
                        templates: {
                            suggestion: function (hit) {
                                if (hit.facet) {
                                    hit.category = hit.facet.value;
                                }

                                if (hit.facet && hit.facet.value !== "<?php echo $allDepartments; ?>") {
                                    hit.url = algoliaConfig.baseUrl + '/catalogsearch/result/?q=' + hit.query + '#q=' + hit.query + '&hFR[categories.level0][0]=' + encodeURIComponent(hit.category) + '&idx=' + algoliaConfig.indexName + '_products';
                                } else {
                                    hit.url = algoliaConfig.baseUrl + '/catalogsearch/result/?q=' + hit.query;
                                }
                                return algoliaConfig.autocomplete.templates.suggestions.render(hit);
                            }
                        }
                    };
                } else {
                    /** If is not products, categories, pages or suggestions, it's additional section **/
                    var index = algolia_client.initIndex(algoliaConfig.indexName + "_section_" + section.name);

                    source = {
                        source: $.fn.autocomplete.sources.hits(index, {
                            hitsPerPage: section.hitsPerPage,
                            analyticsTags: 'autocomplete'
                        }),
                        displayKey: 'value',
                        name: i,
                        templates: {
                            suggestion: function (hit) {
                                hit.url = algoliaConfig.baseUrl + '/catalogsearch/result/?q=' + hit.value + '&refinement_key=' + section.name;
                                return algoliaConfig.autocomplete.templates.additionnalSection.render(hit);
                            }
                        }
                    };
                }

                if (section.name === 'products') {
                    source.templates.footer = function (query, content) {
                        var keys = [];
                        for (var key in content.facets['categories.level0']) {
                            var url = algoliaConfig.baseUrl + '/catalogsearch/result/?q=' + query.query + '#q=' + query.query + '&hFR[categories.level0][0]=' + encodeURIComponent(key) + '&idx=' + algoliaConfig.indexName + '_products';
                            keys.push({
                                key: key,
                                value: content.facets['categories.level0'][key],
                                url: url
                            });
                        }

                        keys.sort(function (a, b) {
                            return b.value - a.value;
                        });

                        var ors = '';

                        if (keys.length > 0) {
                            ors += '<span><a href="' + keys[0].url + '">' + keys[0].key + '</a></span>';
                        }

                        if (keys.length > 1) {
                            ors += ', <span><a href="' + keys[1].url + '">' + keys[1].key + '</a></span>';
                        }

                        var allUrl = algoliaConfig.baseUrl + '/catalogsearch/result/?q=' + query.query;
                        return '<div style="clear: both"><div><div id="autocomplete-products-footer">See products in <span><a href="' + allUrl +  '">All departments</a></span> (' + content.nbHits + ') or in ' + ors + '</div>';
                    }
                }

                if (section.label !== "" && section.name !== 'suggestions' && section.name !== 'products') {
                    source.templates.header = '<div class="category">' + section.label + '</div>';
                }

                return source;
            };


            $(algoliaConfig.autocomplete.selector).each(function () {
                $(this).closest('form').submit(function (e) {
                    var query = $(this).find(algoliaConfig.autocomplete.selector).val();

                    if (algoliaConfig.instant.enabled && query == '')
                        query = '__empty__';

                    window.location = $(this).attr('action') + '?q=' + query;

                    return false;
                });
            });

            /** Handle small screen **/
            $('body').on('click', '#refine-toggle', function () {
                $('#instant-search-facets-container').toggleClass('hidden-sm').toggleClass('hidden-xs');
                if ($(this).html()[0] === '+')
                    $(this).html('- Refine');
                else
                    $(this).html('+ Refine');
            });

            $.fn.focusWithoutScrolling = function(){
                var x = window.scrollX, y = window.scrollY;
                this.focus();
                window.scrollTo(x, y);
            };
        });
    });
</script>